<?php

namespace Contributors\Test;

use Contributors\Analyzer\TupletAnalyzer;

/**
 * Test Contributors\Analyzer\TupletAnalyzer.
 *
 * @file
 * @since 0.1
 *
 * @ingroup ContribtorsTest
 * @ingroup Test
 *
 * @group Contributors
 * @group ContributorsAnalyzer
 *
 * @licence GNU GPL v2+
 * @author John Erling Blad < jeblad@gmail.com >
 *
 */
class TupletAnalyzerTest extends \MediaWikiTestCase {

	/**
	 * @dataProvider provideBuildDescriptor
	 */
	public function testBuildDescriptor( $text, $opts, $expected ) {
		$analyzer = new TupletAnalyzer( $opts );
		$this->assertEquals( $expected, $analyzer->buildDescriptor( $text ) );
	}

	public static function provideBuildDescriptor() {
		return array(
			array( # 0
				"",
				array(),
				array(
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 0 - 31
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 32 - 63
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 64 - 95
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 96 - 127
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 128 - 159
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 160 - 191
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 192 - 221
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0  // 222 - 253
				)
			),
			array( # 1
				"a",
				array(),
				array(
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 0 - 31
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 32 - 63
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 64 - 95
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 96 - 127
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 128 - 159
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 160 - 191
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 192 - 221
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0  // 222 - 253
				)
			),
			array( # 2
				"ab",
				array(),
				array(
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 0 - 31
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 32 - 63
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 64 - 95
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 96 - 127
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 128 - 159
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 160 - 191
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 192 - 221
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0  // 222 - 253
				)
			),
			array( # 3
				"abc",
				array(),
				array(
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 0 - 31
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 32 - 63
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 64 - 95
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 96 - 127
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0, // 128 - 159
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 160 - 191
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 192 - 221
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0  // 222 - 253
				)
			),
			array( # 3
				"abcd",
				array(),
				array(
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 0 - 31
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 32 - 63
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 64 - 95
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 96 - 127
					0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0, // 128 - 159
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 160 - 191
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 192 - 221
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0  // 222 - 253
				)
			),
			array( # 4
				"abcdabc",
				array(),
				array(
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 0 - 31
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0, // 32 - 63
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0, // 64 - 95
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 96 - 127
					0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0, // 128 - 159
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 160 - 191
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 192 - 221
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0  // 222 - 253
				)
			),
			array( # 4
				"abcdabc",
				array( 'size' => 5 ),
				array(
					0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 0 - 31
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 32 - 63
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0, // 64 - 95
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 96 - 127
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 128 - 159
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // 160 - 191
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, // 192 - 223
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0  // 224 - 255
				)
			),
		);
	}

	/**
	 * @dataProvider provideMeasureDistance
	 */
	public function testMeasureDistance( $base, $new, $opts, $expected ) {
		$analyzer = new TupletAnalyzer( $opts );
		$this->assertEquals( $expected, $analyzer->measureDistance( $base, $new ) );
	}

	public static function provideMeasureDistance() {
		return array(
			array( # 0
				array( 0,0,0,0 ),
				array( 0,0,0,0 ),
				array(),
				0
			),
			array( # 1
				array( 0,0,0,0 ),
				array( 1,0,0,0 ),
				array(),
				1.0
			),
			array( # 2
				array( 0,0,0,0 ),
				array( 1,1,0,0 ),
				array(),
				2
			),
			array( # 3
				array( 0,0,0,0 ),
				array( 2,1,0,0 ),
				array(),
				3
			),
		);
	}

	/**
	 * @dataProvider provideCombined
	 */
	public function testCombined( $base, $new, $opts, $expected ) {
		$analyzer = new TupletAnalyzer( $opts );
		$this->assertEquals( $expected, $analyzer->measureDistance( $analyzer->buildDescriptor( $base ), $analyzer->buildDescriptor( $new ) ) );
	}

	public static function provideCombined() {
		return array(
			array( # 0
				"",
				"",
				array(),
				0
			),
			array( # 1
				"",
				"ab",
				array(),
				0
			),
			array( # 2
				"ab",
				"ab",
				array(),
				0
			),
			array( # 3
				"abc",
				"abc",
				array(),
				0
			),
			array( # 4
				"abcd",
				"abcd",
				array(),
				0
			),
			array( # 5
				"abcd",
				"abcde",
				array(),
				1.0
			),
			array( # 6
				"abcd",
				"abcdef",
				array(),
				2
			),
			array( # 7
				"abcd",
				"abefcd",
				array(),
				6 // doublesided
			),
			array( # 8
				"abcd",
				"efabcd",
				array(),
				2
			),
			array( # 9
				"12345abcd67890",
				"12345abefcd67890",
				array(),
				6 // doublesided
			),
			array( # 10
				"12345abcd67890",
				"12345abefcd67890",
				array( 'size' => 1),
				2 // doublesided
			),
			array( # 11
				"12345abcd67890",
				"12345abefcd67890",
				array( 'size' => 5),
				10 // doublesided
			),
		);
	}

	/**
	 * @dataProvider provideSequence
	 */
	public function testSequence( $str, $expected ) {
		$opts = array();
		$analyzer = new TupletAnalyzer( $opts );
		$analyzer->initState();
		$this->assertEquals( $expected, $analyzer->reduce( $analyzer->describe( $str ) ) );
	}

	public static function provideSequence() {
		return array(
			array( # 0
				"abcdef",
				4
			),
			array( # 1
				"abcsd fjgndef",
				11
			),
			array( # 2
				"abcsd fjgn rtyrety def",
				20
			),
			array( # 0
				"abcsd fjgn rtyrety sfgb dghj yiop def",
				35
			),
		);
	}
}
